{"ast":null,"code":"var _jsxFileName = \"/Users/Jainfamily/Desktop/cs466/CS466_Nussinov_Algorithm/client/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction NussinovApp() {\n  _s();\n  const [sequence, setSequence] = useState(\"\");\n  const [dpTable, setDpTable] = useState([]);\n  const [visitedCells, setVisitedCells] = useState([]);\n  const [structure, setStructure] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const handleSubmit = async event => {\n    event.preventDefault();\n    const validCharacters = /^[AUCG]*$/i;\n    if (sequence.length > 20) {\n      setError(\"Please enter a valid RNA sequence (≤ 20 characters).\");\n      return;\n    }\n    if (!validCharacters.test(sequence)) {\n      setError(\"Invalid sequence! Please use only A, U, C, and G.\");\n      return;\n    }\n    try {\n      const response = await fetch(\"http://localhost:4000/nussinov\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          sequence\n        })\n      });\n      const data = await response.json();\n      if (response.ok) {\n        setDpTable(data.dp_table);\n        setVisitedCells(data.visited_cells);\n        setStructure(data.structure);\n        setError(\"\");\n      } else {\n        setError(data.error);\n      }\n    } catch (e) {\n      setError(\"An unexpected error occurred while processing your request.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: styles.container,\n    children: [error && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.errorBar,\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Nussinov Algorithm Visualization\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      style: styles.form,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: sequence,\n        onChange: e => setSequence(e.target.value),\n        placeholder: \"Enter RNA Sequence (\\u2264 20 chars)\",\n        required: true,\n        style: styles.input\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        style: styles.button,\n        children: \"Run Algorithm\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.output,\n      children: [dpTable.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"DP Table for RNA Sequence: \", sequence]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n          style: styles.table,\n          children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: dpTable.map((row, i) => /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: row.map((cell, j) => /*#__PURE__*/_jsxDEV(\"td\", {\n                style: {\n                  ...styles.cell,\n                  ...(visitedCells.some(([x, y]) => x === i && y === j) ? styles.highlight : {})\n                },\n                children: cell\n              }, `${i}-${j}`, false, {\n                fileName: _jsxFileName,\n                lineNumber: 70,\n                columnNumber: 23\n              }, this))\n            }, i, false, {\n              fileName: _jsxFileName,\n              lineNumber: 68,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }, this), structure && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Predicted Secondary Structure:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: structure\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n}\n_s(NussinovApp, \"R4Mrry6VFP6ApsKe8TXs7KCKs8w=\");\n_c = NussinovApp;\nconst styles = {\n  container: {\n    fontFamily: \"Arial, sans-serif\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    minHeight: \"100vh\",\n    padding: \"20px\"\n  },\n  form: {\n    textAlign: \"center\",\n    marginBottom: \"20px\"\n  },\n  input: {\n    width: \"300px\",\n    height: \"40px\",\n    fontSize: \"16px\",\n    padding: \"5px\",\n    margin: \"10px 0\",\n    border: \"1px solid #ccc\",\n    borderRadius: \"5px\"\n  },\n  button: {\n    fontSize: \"16px\",\n    padding: \"10px 20px\",\n    backgroundColor: \"#007bff\",\n    color: \"white\",\n    border: \"none\",\n    borderRadius: \"5px\",\n    cursor: \"pointer\"\n  },\n  buttonHover: {\n    backgroundColor: \"#0056b3\"\n  },\n  output: {\n    marginTop: \"20px\",\n    maxHeight: \"60vh\",\n    overflowY: \"auto\",\n    textAlign: \"center\"\n  },\n  table: {\n    borderCollapse: \"collapse\",\n    margin: \"20px auto\",\n    maxWidth: \"100%\"\n  },\n  cell: {\n    border: \"1px solid black\",\n    padding: \"10px\",\n    textAlign: \"center\",\n    width: \"40px\",\n    height: \"40px\",\n    fontSize: \"12px\"\n  },\n  highlight: {\n    backgroundColor: \"yellow\"\n  },\n  errorBar: {\n    backgroundColor: \"#ffcccc\",\n    color: \"#cc0000\",\n    margin: \"20px\",\n    width: \"100%\",\n    textAlign: \"center\",\n    fontWeight: \"bold\",\n    position: \"fixed\",\n    top: 0,\n    left: 0,\n    zIndex: 1000\n  }\n};\nexport default NussinovApp;\n\n// import React, { useState } from \"react\";\n\n// function NussinovApp() {\n//   const [sequence, setSequence] = useState(\"\"); // State for input sequence\n//   const [dpTable, setDpTable] = useState([]); // State for DP Table\n//   const [visitedCells, setVisitedCells] = useState([]); // State for visited cells\n//   const [structure, setStructure] = useState(\"\"); // State for predicted structure\n//   const [error, setError] = useState(\"\"); // State for errors\n\n//   const handleSubmit = async (event) => {\n//     event.preventDefault();\n//     const validCharacters = /^[AUCG]*$/i; // Valid RNA characters\n\n//     // Validation: Check sequence length and validity\n//     if (sequence.length > 20) {\n//       alert(\"Please enter a valid RNA sequence (≤ 20 characters).\");\n//       return;\n//     }\n//     if (!validCharacters.test(sequence)) {\n//       alert(\"Invalid sequence! Please use only A, U, C, and G.\");\n//       return;\n//     }\n\n//     try {\n//       // Send the sequence to the backend for processing\n//       const response = await fetch(\"http://localhost:4000/nussinov\", {\n//         method: \"POST\",\n//         headers: { \"Content-Type\": \"application/json\" },\n//         body: JSON.stringify({ sequence }),\n//       });\n\n//       const data = await response.json();\n//       if (response.ok) {\n//         setDpTable(data.dp_table);\n//         setVisitedCells(data.visited_cells);\n//         setStructure(data.structure);\n//         setError(\"\"); // Clear errors if any\n//       } else {\n//         setError(data.error);\n//       }\n//     } catch (e) {\n//       setError(\"An unexpected error occurred while processing your request.\");\n//     }\n//   };\n\n//   return (\n//     <div style={styles.container}>\n//       <h1>Nussinov Algorithm Visualization</h1>\n//       <form onSubmit={handleSubmit} style={styles.form}>\n//         <input\n//           type=\"text\"\n//           value={sequence}\n//           onChange={(e) => setSequence(e.target.value)}\n//           placeholder=\"Enter RNA Sequence (≤ 20 chars)\"\n//           required\n//           style={styles.input}\n//         />\n//         <button type=\"submit\" style={styles.button}>\n//           Run Algorithm\n//         </button>\n//       </form>\n//       <div style={styles.output}>\n//         {error && <p style={styles.error}>{error}</p>}\n//         {dpTable.length > 0 && (\n//           <div>\n//             <h3>DP Table for RNA Sequence: {sequence}</h3>\n//             <table style={styles.table}>\n//               <tbody>\n//                 {dpTable.map((row, i) => (\n//                   <tr key={i}>\n//                     {row.map((cell, j) => (\n//                       <td\n//                         key={`${i}-${j}`}\n//                         style={{\n//                           ...styles.cell,\n//                           ...(visitedCells.some(\n//                             ([x, y]) => x === i && y === j\n//                           )\n//                             ? styles.highlight\n//                             : {}),\n//                         }}\n//                       >\n//                         {cell}\n//                       </td>\n//                     ))}\n//                   </tr>\n//                 ))}\n//               </tbody>\n//             </table>\n//           </div>\n//         )}\n//         {structure && (\n//           <div>\n//             <h3>Predicted Secondary Structure:</h3>\n//             <p>{structure}</p>\n//           </div>\n//         )}\n//       </div>\n//     </div>\n//   );\n// }\n\n// const styles = {\n//   container: {\n//     fontFamily: \"Arial, sans-serif\",\n//     display: \"flex\",\n//     flexDirection: \"column\",\n//     alignItems: \"center\",\n//     justifyContent: \"center\",\n//     height: \"100vh\",\n//     padding: \"20px\",\n//   },\n//   form: {\n//     textAlign: \"center\",\n//     marginBottom: \"20px\",\n//   },\n//   input: {\n//     width: \"300px\",\n//     height: \"40px\",\n//     fontSize: \"16px\",\n//     padding: \"5px\",\n//     margin: \"10px 0\",\n//     border: \"1px solid #ccc\",\n//     borderRadius: \"5px\",\n//   },\n//   button: {\n//     fontSize: \"16px\",\n//     padding: \"10px 20px\",\n//     backgroundColor: \"#007bff\",\n//     color: \"white\",\n//     border: \"none\",\n//     borderRadius: \"5px\",\n//     cursor: \"pointer\",\n//   },\n//   buttonHover: {\n//     backgroundColor: \"#0056b3\",\n//   },\n//   output: {\n//     marginTop: \"20px\",\n//     maxHeight: \"60vh\",\n//     overflowY: \"auto\",\n//     textAlign: \"center\",\n//   },\n//   table: {\n//     borderCollapse: \"collapse\",\n//     margin: \"20px auto\",\n//     maxWidth: \"100%\",\n//   },\n//   cell: {\n//     border: \"1px solid black\",\n//     padding: \"10px\",\n//     textAlign: \"center\",\n//     width: \"40px\",\n//     height: \"40px\",\n//     fontSize: \"12px\",\n//   },\n//   highlight: {\n//     backgroundColor: \"yellow\",\n//   },\n//   error: {\n//     color: \"red\",\n//     fontWeight: \"bold\",\n//   },\n// };\n\n// export default NussinovApp;\nvar _c;\n$RefreshReg$(_c, \"NussinovApp\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","NussinovApp","_s","sequence","setSequence","dpTable","setDpTable","visitedCells","setVisitedCells","structure","setStructure","error","setError","handleSubmit","event","preventDefault","validCharacters","length","test","response","fetch","method","headers","body","JSON","stringify","data","json","ok","dp_table","visited_cells","e","style","styles","container","children","errorBar","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","form","type","value","onChange","target","placeholder","required","input","button","output","table","map","row","i","cell","j","some","x","y","highlight","_c","fontFamily","display","flexDirection","alignItems","justifyContent","minHeight","padding","textAlign","marginBottom","width","height","fontSize","margin","border","borderRadius","backgroundColor","color","cursor","buttonHover","marginTop","maxHeight","overflowY","borderCollapse","maxWidth","fontWeight","position","top","left","zIndex","$RefreshReg$"],"sources":["/Users/Jainfamily/Desktop/cs466/CS466_Nussinov_Algorithm/client/src/App.js"],"sourcesContent":["import React, { useState } from \"react\";\n\nfunction NussinovApp() {\n  const [sequence, setSequence] = useState(\"\");\n  const [dpTable, setDpTable] = useState([]);\n  const [visitedCells, setVisitedCells] = useState([]);\n  const [structure, setStructure] = useState(\"\");\n  const [error, setError] = useState(\"\");\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n    const validCharacters = /^[AUCG]*$/i;\n\n    if (sequence.length > 20) {\n      setError(\"Please enter a valid RNA sequence (≤ 20 characters).\");\n      return;\n    }\n    if (!validCharacters.test(sequence)) {\n      setError(\"Invalid sequence! Please use only A, U, C, and G.\");\n      return;\n    }\n\n    try {\n      const response = await fetch(\"http://localhost:4000/nussinov\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ sequence }),\n      });\n\n      const data = await response.json();\n      if (response.ok) {\n        setDpTable(data.dp_table);\n        setVisitedCells(data.visited_cells);\n        setStructure(data.structure);\n        setError(\"\");\n      } else {\n        setError(data.error);\n      }\n    } catch (e) {\n      setError(\"An unexpected error occurred while processing your request.\");\n    }\n  };\n\n  return (\n    <div style={styles.container}>\n      {error && <div style={styles.errorBar}>{error}</div>}\n      <h1>Nussinov Algorithm Visualization</h1>\n      <form onSubmit={handleSubmit} style={styles.form}>\n        <input\n          type=\"text\"\n          value={sequence}\n          onChange={(e) => setSequence(e.target.value)}\n          placeholder=\"Enter RNA Sequence (≤ 20 chars)\"\n          required\n          style={styles.input}\n        />\n        <button type=\"submit\" style={styles.button}>\n          Run Algorithm\n        </button>\n      </form>\n      <div style={styles.output}>\n        {dpTable.length > 0 && (\n          <div>\n            <h3>DP Table for RNA Sequence: {sequence}</h3>\n            <table style={styles.table}>\n              <tbody>\n                {dpTable.map((row, i) => (\n                  <tr key={i}>\n                    {row.map((cell, j) => (\n                      <td\n                        key={`${i}-${j}`}\n                        style={{\n                          ...styles.cell,\n                          ...(visitedCells.some(\n                            ([x, y]) => x === i && y === j\n                          )\n                            ? styles.highlight\n                            : {}),\n                        }}\n                      >\n                        {cell}\n                      </td>\n                    ))}\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        )}\n        {structure && (\n          <div>\n            <h3>Predicted Secondary Structure:</h3>\n            <p>{structure}</p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nconst styles = {\n  container: {\n    fontFamily: \"Arial, sans-serif\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    minHeight: \"100vh\",\n    padding: \"20px\",\n  },\n  form: {\n    textAlign: \"center\",\n    marginBottom: \"20px\",\n  },\n  input: {\n    width: \"300px\",\n    height: \"40px\",\n    fontSize: \"16px\",\n    padding: \"5px\",\n    margin: \"10px 0\",\n    border: \"1px solid #ccc\",\n    borderRadius: \"5px\",\n  },\n  button: {\n    fontSize: \"16px\",\n    padding: \"10px 20px\",\n    backgroundColor: \"#007bff\",\n    color: \"white\",\n    border: \"none\",\n    borderRadius: \"5px\",\n    cursor: \"pointer\",\n  },\n  buttonHover: {\n    backgroundColor: \"#0056b3\",\n  },\n  output: {\n    marginTop: \"20px\",\n    maxHeight: \"60vh\",\n    overflowY: \"auto\",\n    textAlign: \"center\",\n  },\n  table: {\n    borderCollapse: \"collapse\",\n    margin: \"20px auto\",\n    maxWidth: \"100%\",\n  },\n  cell: {\n    border: \"1px solid black\",\n    padding: \"10px\",\n    textAlign: \"center\",\n    width: \"40px\",\n    height: \"40px\",\n    fontSize: \"12px\",\n  },\n  highlight: {\n    backgroundColor: \"yellow\",\n  },\n  errorBar: {\n    backgroundColor: \"#ffcccc\",\n    color: \"#cc0000\",\n    margin: \"20px\",\n\n    width: \"100%\",\n    textAlign: \"center\",\n    fontWeight: \"bold\",\n    position: \"fixed\",\n    top: 0,\n    left: 0,\n    zIndex: 1000,\n  },\n};\n\nexport default NussinovApp;\n\n\n// import React, { useState } from \"react\";\n\n// function NussinovApp() {\n//   const [sequence, setSequence] = useState(\"\"); // State for input sequence\n//   const [dpTable, setDpTable] = useState([]); // State for DP Table\n//   const [visitedCells, setVisitedCells] = useState([]); // State for visited cells\n//   const [structure, setStructure] = useState(\"\"); // State for predicted structure\n//   const [error, setError] = useState(\"\"); // State for errors\n\n//   const handleSubmit = async (event) => {\n//     event.preventDefault();\n//     const validCharacters = /^[AUCG]*$/i; // Valid RNA characters\n\n//     // Validation: Check sequence length and validity\n//     if (sequence.length > 20) {\n//       alert(\"Please enter a valid RNA sequence (≤ 20 characters).\");\n//       return;\n//     }\n//     if (!validCharacters.test(sequence)) {\n//       alert(\"Invalid sequence! Please use only A, U, C, and G.\");\n//       return;\n//     }\n\n//     try {\n//       // Send the sequence to the backend for processing\n//       const response = await fetch(\"http://localhost:4000/nussinov\", {\n//         method: \"POST\",\n//         headers: { \"Content-Type\": \"application/json\" },\n//         body: JSON.stringify({ sequence }),\n//       });\n\n//       const data = await response.json();\n//       if (response.ok) {\n//         setDpTable(data.dp_table);\n//         setVisitedCells(data.visited_cells);\n//         setStructure(data.structure);\n//         setError(\"\"); // Clear errors if any\n//       } else {\n//         setError(data.error);\n//       }\n//     } catch (e) {\n//       setError(\"An unexpected error occurred while processing your request.\");\n//     }\n//   };\n\n//   return (\n//     <div style={styles.container}>\n//       <h1>Nussinov Algorithm Visualization</h1>\n//       <form onSubmit={handleSubmit} style={styles.form}>\n//         <input\n//           type=\"text\"\n//           value={sequence}\n//           onChange={(e) => setSequence(e.target.value)}\n//           placeholder=\"Enter RNA Sequence (≤ 20 chars)\"\n//           required\n//           style={styles.input}\n//         />\n//         <button type=\"submit\" style={styles.button}>\n//           Run Algorithm\n//         </button>\n//       </form>\n//       <div style={styles.output}>\n//         {error && <p style={styles.error}>{error}</p>}\n//         {dpTable.length > 0 && (\n//           <div>\n//             <h3>DP Table for RNA Sequence: {sequence}</h3>\n//             <table style={styles.table}>\n//               <tbody>\n//                 {dpTable.map((row, i) => (\n//                   <tr key={i}>\n//                     {row.map((cell, j) => (\n//                       <td\n//                         key={`${i}-${j}`}\n//                         style={{\n//                           ...styles.cell,\n//                           ...(visitedCells.some(\n//                             ([x, y]) => x === i && y === j\n//                           )\n//                             ? styles.highlight\n//                             : {}),\n//                         }}\n//                       >\n//                         {cell}\n//                       </td>\n//                     ))}\n//                   </tr>\n//                 ))}\n//               </tbody>\n//             </table>\n//           </div>\n//         )}\n//         {structure && (\n//           <div>\n//             <h3>Predicted Secondary Structure:</h3>\n//             <p>{structure}</p>\n//           </div>\n//         )}\n//       </div>\n//     </div>\n//   );\n// }\n\n// const styles = {\n//   container: {\n//     fontFamily: \"Arial, sans-serif\",\n//     display: \"flex\",\n//     flexDirection: \"column\",\n//     alignItems: \"center\",\n//     justifyContent: \"center\",\n//     height: \"100vh\",\n//     padding: \"20px\",\n//   },\n//   form: {\n//     textAlign: \"center\",\n//     marginBottom: \"20px\",\n//   },\n//   input: {\n//     width: \"300px\",\n//     height: \"40px\",\n//     fontSize: \"16px\",\n//     padding: \"5px\",\n//     margin: \"10px 0\",\n//     border: \"1px solid #ccc\",\n//     borderRadius: \"5px\",\n//   },\n//   button: {\n//     fontSize: \"16px\",\n//     padding: \"10px 20px\",\n//     backgroundColor: \"#007bff\",\n//     color: \"white\",\n//     border: \"none\",\n//     borderRadius: \"5px\",\n//     cursor: \"pointer\",\n//   },\n//   buttonHover: {\n//     backgroundColor: \"#0056b3\",\n//   },\n//   output: {\n//     marginTop: \"20px\",\n//     maxHeight: \"60vh\",\n//     overflowY: \"auto\",\n//     textAlign: \"center\",\n//   },\n//   table: {\n//     borderCollapse: \"collapse\",\n//     margin: \"20px auto\",\n//     maxWidth: \"100%\",\n//   },\n//   cell: {\n//     border: \"1px solid black\",\n//     padding: \"10px\",\n//     textAlign: \"center\",\n//     width: \"40px\",\n//     height: \"40px\",\n//     fontSize: \"12px\",\n//   },\n//   highlight: {\n//     backgroundColor: \"yellow\",\n//   },\n//   error: {\n//     color: \"red\",\n//     fontWeight: \"bold\",\n//   },\n// };\n\n// export default NussinovApp;\n"],"mappings":"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,KAAK,EAAE,MAAM;IACbF,SAAS,EAAE,QAAQ;IACnBiB,UAAU,EAAE,MAAM;IAClBC,QAAQ,EAAE,OAAO;IACjBC,GAAG,EAAE,CAAC;IACNC,IAAI,EAAE,CAAC;IACPC,MAAM,EAAE;EACV;AACF,CAAC;AAED,eAAe1F,WAAW;;AAG1B;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA,IAAA6D,EAAA;AAAA8B,YAAA,CAAA9B,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}