{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kavpu\\\\CS466_Nussinov_Algorithm\\\\client\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { FornaContainer } from \"fornac\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction NussinovApp() {\n  _s();\n  const [sequence, setSequence] = useState(\"\");\n  const [dpTable, setDpTable] = useState([]);\n  const [visitedCells, setVisitedCells] = useState([]);\n  const [structure, setStructure] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const handleSubmit = async event => {\n    event.preventDefault();\n    const validCharacters = /^[AUCG]*$/i;\n    if (sequence.length > 20) {\n      setError(\"Please enter a valid RNA sequence (â‰¤ 20 characters).\");\n      return;\n    }\n    if (!validCharacters.test(sequence)) {\n      setError(\"Invalid sequence! Please use only A, U, C, and G.\");\n      return;\n    }\n    try {\n      const response = await fetch(\"http://localhost:4000/nussinov\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          sequence\n        })\n      });\n      const data = await response.json();\n      if (response.ok) {\n        setDpTable(data.dp_table);\n        setVisitedCells(data.visited_cells);\n        setStructure(data.structure);\n        setError(\"\");\n      } else {\n        setError(data.error);\n      }\n    } catch (e) {\n      setError(\"An unexpected error occurred while processing your request.\");\n    }\n  };\n\n  // useEffect(() => {\n  //   if (structure) {\n  //     const fornaContainer = new FornaContainer(\"#fornaContainer\", {\n  //       allowPanningAndZooming: true,\n  //       initialSize: [800, 400],\n  //     });\n\n  //     fornaContainer.addRNA(sequence, { structure });\n  //   }\n  // }, [structure, sequence]);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: styles.container,\n    children: [error && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.errorBar,\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Nussinov Algorithm Visualization\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      style: styles.form,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: sequence,\n        onChange: e => setSequence(e.target.value),\n        placeholder: \"Enter RNA Sequence (\\u2264 20 chars)\",\n        required: true,\n        style: styles.input\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        style: styles.button,\n        children: \"Run Algorithm\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.output,\n      children: [dpTable.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"DP Table for RNA Sequence: \", sequence]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n          style: styles.table,\n          children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: dpTable.map((row, i) => /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: row.map((cell, j) => /*#__PURE__*/_jsxDEV(\"td\", {\n                style: {\n                  ...styles.cell,\n                  ...(visitedCells.some(([x, y]) => x === i && y === j) ? styles.highlight : {})\n                },\n                children: cell\n              }, `${i}-${j}`, false, {\n                fileName: _jsxFileName,\n                lineNumber: 82,\n                columnNumber: 23\n              }, this))\n            }, i, false, {\n              fileName: _jsxFileName,\n              lineNumber: 80,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 11\n      }, this), structure && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Predicted Secondary Structure:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n          style: styles.structureTable,\n          children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n              children: sequence.split('').map((char, index) => /*#__PURE__*/_jsxDEV(\"td\", {\n                style: styles.structureCell,\n                children: char\n              }, `seq-${index}`, false, {\n                fileName: _jsxFileName,\n                lineNumber: 110,\n                columnNumber: 21\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 108,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: structure.split('').map((char, index) => /*#__PURE__*/_jsxDEV(\"td\", {\n                style: styles.structureCell,\n                children: /*#__PURE__*/_jsxDEV(\"span\", {\n                  style: {\n                    fontWeight: 'bold',\n                    fontSize: '18px'\n                  },\n                  children: char\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 116,\n                  columnNumber: 21\n                }, this)\n              }, `struct-${index}`, false, {\n                fileName: _jsxFileName,\n                lineNumber: 115,\n                columnNumber: 21\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 113,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"fornaContainer\",\n          style: styles.fornaContainer\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 13\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n}\n_s(NussinovApp, \"R4Mrry6VFP6ApsKe8TXs7KCKs8w=\");\n_c = NussinovApp;\nconst styles = {\n  container: {\n    fontFamily: \"Arial, sans-serif\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    minHeight: \"100vh\",\n    paddingTop: \"10px\",\n    padding: \"20px\"\n  },\n  form: {\n    textAlign: \"center\",\n    marginBottom: \"20px\"\n  },\n  input: {\n    width: \"300px\",\n    height: \"40px\",\n    fontSize: \"16px\",\n    padding: \"5px\",\n    margin: \"10px 0\",\n    border: \"1px solid #ccc\",\n    borderRadius: \"5px\"\n  },\n  button: {\n    fontSize: \"16px\",\n    padding: \"16px 20px\",\n    margin: \"10px\",\n    backgroundColor: \"#007bff\",\n    color: \"white\",\n    border: \"none\",\n    borderRadius: \"5px\",\n    cursor: \"pointer\"\n  },\n  buttonHover: {\n    backgroundColor: \"#0056b3\"\n  },\n  output: {\n    marginTop: \"20px\",\n    maxHeight: \"60vh\",\n    overflowY: \"auto\",\n    textAlign: \"center\"\n  },\n  table: {\n    borderCollapse: \"collapse\",\n    margin: \"20px auto\",\n    maxWidth: \"100%\"\n  },\n  cell: {\n    border: \"1px solid black\",\n    padding: \"10px\",\n    textAlign: \"center\",\n    width: \"40px\",\n    height: \"40px\",\n    fontSize: \"12px\"\n  },\n  highlight: {\n    backgroundColor: \"yellow\"\n  },\n  errorBar: {\n    backgroundColor: \"#ffcccc\",\n    color: \"#cc0000\",\n    padding: \"10px\",\n    margin: \"20px auto\",\n    width: \"50%\",\n    textAlign: \"center\",\n    fontWeight: \"bold\",\n    position: \"fixed\",\n    top: 0,\n    left: \"50%\",\n    transform: \"translateX(-50%)\",\n    zIndex: 1000,\n    borderRadius: '10px'\n  },\n  structureTable: {\n    borderCollapse: \"collapse\",\n    margin: \"20px auto\",\n    maxWidth: \"100%\"\n  },\n  structureCell: {\n    border: \"1px solid black\",\n    padding: \"10px\",\n    textAlign: \"center\",\n    width: \"30px\",\n    height: \"30px\",\n    fontSize: \"14px\"\n  },\n  fornaContainer: {\n    width: \"100%\",\n    height: \"400px\",\n    border: \"1px solid black\",\n    marginTop: \"20px\"\n  }\n};\nexport default NussinovApp;\nvar _c;\n$RefreshReg$(_c, \"NussinovApp\");","map":{"version":3,"names":["React","useState","useEffect","FornaContainer","jsxDEV","_jsxDEV","NussinovApp","_s","sequence","setSequence","dpTable","setDpTable","visitedCells","setVisitedCells","structure","setStructure","error","setError","handleSubmit","event","preventDefault","validCharacters","length","test","response","fetch","method","headers","body","JSON","stringify","data","json","ok","dp_table","visited_cells","e","style","styles","container","children","errorBar","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","form","type","value","onChange","target","placeholder","required","input","button","output","table","map","row","i","cell","j","some","x","y","highlight","structureTable","split","char","index","structureCell","fontWeight","fontSize","id","fornaContainer","_c","fontFamily","display","flexDirection","alignItems","justifyContent","minHeight","paddingTop","padding","textAlign","marginBottom","width","height","margin","border","borderRadius","backgroundColor","color","cursor","buttonHover","marginTop","maxHeight","overflowY","borderCollapse","maxWidth","position","top","left","transform","zIndex","$RefreshReg$"],"sources":["C:/Users/kavpu/CS466_Nussinov_Algorithm/client/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { FornaContainer } from \"fornac\";\r\n\r\nfunction NussinovApp() {\r\n  const [sequence, setSequence] = useState(\"\");\r\n  const [dpTable, setDpTable] = useState([]);\r\n  const [visitedCells, setVisitedCells] = useState([]);\r\n  const [structure, setStructure] = useState(\"\");\r\n  const [error, setError] = useState(\"\");\r\n\r\n  const handleSubmit = async (event) => {\r\n    event.preventDefault();\r\n    const validCharacters = /^[AUCG]*$/i;\r\n\r\n    if (sequence.length > 20) {\r\n      setError(\"Please enter a valid RNA sequence (â‰¤ 20 characters).\");\r\n      return;\r\n    }\r\n    if (!validCharacters.test(sequence)) {\r\n      setError(\"Invalid sequence! Please use only A, U, C, and G.\");\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const response = await fetch(\"http://localhost:4000/nussinov\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({ sequence }),\r\n      });\r\n\r\n      const data = await response.json();\r\n      if (response.ok) {\r\n        setDpTable(data.dp_table);\r\n        setVisitedCells(data.visited_cells);\r\n        setStructure(data.structure);\r\n        setError(\"\");\r\n      } else {\r\n        setError(data.error);\r\n      }\r\n    } catch (e) {\r\n      setError(\"An unexpected error occurred while processing your request.\");\r\n    }\r\n  };\r\n\r\n// useEffect(() => {\r\n//   if (structure) {\r\n//     const fornaContainer = new FornaContainer(\"#fornaContainer\", {\r\n//       allowPanningAndZooming: true,\r\n//       initialSize: [800, 400],\r\n//     });\r\n\r\n//     fornaContainer.addRNA(sequence, { structure });\r\n//   }\r\n// }, [structure, sequence]);\r\n\r\n  return (\r\n    <div style={styles.container}>\r\n      {error && <div style={styles.errorBar}>{error}</div>}\r\n      <h1>Nussinov Algorithm Visualization</h1>\r\n      <form onSubmit={handleSubmit} style={styles.form}>\r\n        <input\r\n          type=\"text\"\r\n          value={sequence}\r\n          onChange={(e) => setSequence(e.target.value)}\r\n          placeholder=\"Enter RNA Sequence (â‰¤ 20 chars)\"\r\n          required\r\n          style={styles.input}\r\n        />\r\n        <button type=\"submit\" style={styles.button}>\r\n          Run Algorithm\r\n        </button>\r\n      </form>\r\n      <div style={styles.output}>\r\n        {dpTable.length > 0 && (\r\n          <div>\r\n            <h3>DP Table for RNA Sequence: {sequence}</h3>\r\n            <table style={styles.table}>\r\n              <tbody>\r\n                {dpTable.map((row, i) => (\r\n                  <tr key={i}>\r\n                    {row.map((cell, j) => (\r\n                      <td\r\n                        key={`${i}-${j}`}\r\n                        style={{\r\n                          ...styles.cell,\r\n                          ...(visitedCells.some(\r\n                            ([x, y]) => x === i && y === j\r\n                          )\r\n                            ? styles.highlight\r\n                            : {}),\r\n                        }}\r\n                      >\r\n                        {cell}\r\n                      </td>\r\n                    ))}\r\n                  </tr>\r\n                ))}\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n        )}\r\n        {structure && (\r\n          <div>\r\n            <h3>Predicted Secondary Structure:</h3>\r\n            {/* <p>{structure}</p> */}\r\n            <table style={styles.structureTable}>\r\n            <tbody>\r\n                <tr>\r\n                {sequence.split('').map((char, index) => (\r\n                    <td key={`seq-${index}`} style={styles.structureCell}>{char}</td>\r\n                ))}\r\n                </tr>\r\n                <tr>\r\n                {structure.split('').map((char, index) => (\r\n                    <td key={`struct-${index}`} style={styles.structureCell}>\r\n                    <span style={{ fontWeight: 'bold', fontSize: '18px' }}>{char}</span>\r\n\r\n                    </td>\r\n                ))}\r\n                </tr>\r\n            </tbody>\r\n            </table>\r\n            <div id=\"fornaContainer\" style={styles.fornaContainer}></div> {/* Forna Container */}\r\n          </div>\r\n        )}\r\n        \r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst styles = {\r\n  container: {\r\n    fontFamily: \"Arial, sans-serif\",\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    minHeight: \"100vh\",\r\n    paddingTop: \"10px\",\r\n    padding: \"20px\",\r\n  },\r\n  form: {\r\n    textAlign: \"center\",\r\n    marginBottom: \"20px\",\r\n  },\r\n  input: {\r\n    width: \"300px\",\r\n    height: \"40px\",\r\n    fontSize: \"16px\",\r\n    padding: \"5px\",\r\n    margin: \"10px 0\",\r\n    border: \"1px solid #ccc\",\r\n    borderRadius: \"5px\",\r\n  },\r\n  button: {\r\n    fontSize: \"16px\",\r\n    padding: \"16px 20px\",\r\n    margin: \"10px\",\r\n    backgroundColor: \"#007bff\",\r\n    color: \"white\",\r\n    border: \"none\",\r\n    borderRadius: \"5px\",\r\n    cursor: \"pointer\",\r\n  },\r\n  buttonHover: {\r\n    backgroundColor: \"#0056b3\",\r\n  },\r\n  output: {\r\n    marginTop: \"20px\",\r\n    maxHeight: \"60vh\",\r\n    overflowY: \"auto\",\r\n    textAlign: \"center\",\r\n  },\r\n  table: {\r\n    borderCollapse: \"collapse\",\r\n    margin: \"20px auto\",\r\n    maxWidth: \"100%\",\r\n  },\r\n  cell: {\r\n    border: \"1px solid black\",\r\n    padding: \"10px\",\r\n    textAlign: \"center\",\r\n    width: \"40px\",\r\n    height: \"40px\",\r\n    fontSize: \"12px\",\r\n  },\r\n  highlight: {\r\n    backgroundColor: \"yellow\",\r\n  },\r\n  errorBar: {\r\n  backgroundColor: \"#ffcccc\",\r\n  color: \"#cc0000\",\r\n  padding: \"10px\",\r\n  margin: \"20px auto\",\r\n  width: \"50%\",\r\n  textAlign: \"center\",\r\n  fontWeight: \"bold\",\r\n  position: \"fixed\",\r\n  top: 0,\r\n  left: \"50%\",\r\n  transform: \"translateX(-50%)\",\r\n  zIndex: 1000,\r\n  borderRadius: '10px',\r\n},\r\n\r\nstructureTable: {\r\n  borderCollapse: \"collapse\",\r\n  margin: \"20px auto\",\r\n  maxWidth: \"100%\",\r\n},\r\nstructureCell: {\r\n  border: \"1px solid black\",\r\n  padding: \"10px\",\r\n  textAlign: \"center\",\r\n  width: \"30px\",\r\n  height: \"30px\",\r\n  fontSize: \"14px\",\r\n},\r\nfornaContainer: {\r\n  width: \"100%\",\r\n  height: \"400px\",\r\n  border: \"1px solid black\",\r\n  marginTop: \"20px\",\r\n},\r\n};\r\n\r\nexport default NussinovApp;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}